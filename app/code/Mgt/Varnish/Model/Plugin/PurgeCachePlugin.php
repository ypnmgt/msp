<?php
 namespace Mgt\Varnish\Model\Plugin; use Zend\Uri\Uri; class PurgeCachePlugin extends \Magento\CacheInvalidate\Model\PurgeCache { const REQUEST_TIMEOUT = 5; protected $coreLogger; protected $logger; protected $varnishConfig; protected $urlCollection; protected $objectManager; protected static $tagsRegistry = []; public function __construct(\Magento\PageCache\Model\Cache\Server $cacheServer, \Magento\CacheInvalidate\Model\SocketFactory $socketAdapterFactory, \Mgt\Varnish\Model\Cache\Config $varnishConfig, \Mgt\Varnish\Model\ResourceModel\Url\Collection $urlCollection, \Magento\Framework\ObjectManagerInterface $objectManager, \Psr\Log\LoggerInterface $coreLogger, \Mgt\Varnish\Model\Logger\Logger $logger) { goto f464f; cbf51: $this->objectManager = $objectManager; goto B844a; f464f: $this->cacheServer = $cacheServer; goto f7939; e1f43: $this->coreLogger = $coreLogger; goto C9acb; f7939: $this->socketAdapterFactory = $socketAdapterFactory; goto E024e; E024e: $this->varnishConfig = $varnishConfig; goto cbf51; C9acb: $this->logger = $logger; goto F63cd; B844a: $this->urlCollection = $urlCollection; goto e1f43; F63cd: } public function sendPurgeRequest($tagsPattern) { goto bd772; E1781: D433a: goto c4643; c8102: foreach ($tags as $tag) { $tagsPattern[] = sprintf($pattern, $tag); Ab652: } goto E1781; F5d2d: $pattern = "\50\50\x5e\x7c\54\x29\x25\x73\x28\x2c\x7c\x24\x29\51"; goto Ab1a8; fdf11: $this->addToQueue($tags); goto D5bd4; f735c: Ab338: goto C6249; e0e04: db7d1: goto F5fc0; f40be: switch ($tagsPattern) { case "\x2e\x2a": $logMessage = "\124\150\x65\x20\x77\x68\157\x6c\145\x20\126\141\x72\x6e\x69\163\x68\40\103\x61\143\150\145\40\x68\x61\x73\40\142\x65\145\156\x20\x70\x75\162\x67\x65\x64"; goto db7d1; } goto a1a30; D949b: $headers = [self::HEADER_X_MAGENTO_TAGS_PATTERN => $tagsPattern]; goto a7a40; d3fa0: d8272: goto B3d8c; bcf74: return true; goto Dec93; Ab1a8: $tagsPattern = []; goto c8102; Bdef3: if (!(true === $isCacheWarmerEnabled)) { goto Ffdf3; } goto fdf11; dc197: if (true === is_array($tagsPattern)) { goto d8272; } goto Cf9a0; a1a30: Bdbc1: goto e0e04; c4643: $logMessage = sprintf("\x56\141\x72\156\x69\x73\150\x20\103\141\x63\150\x65\x20\x70\165\x72\147\x65\x64\40\142\171\40\146\157\154\154\x6f\167\151\x6e\x67\40\164\x61\147\x73\x3a\40\45\163", print_r($tags, true)); goto Fbded; Fbded: $tagsPattern = implode("\x7c", array_unique($tagsPattern)); goto F048a; a7a40: $this->_sendPurgeRequest($headers); goto aabf1; C6249: if ($tags) { goto B105f; } goto cad82; cad82: return true; goto cb61f; F048a: C757c: goto D949b; F5fc0: goto C757c; goto d3fa0; D8313: $this->logMessage($logMessage); goto bcf74; D5bd4: Ffdf3: goto D8313; cb61f: B105f: goto F5d2d; Cf9a0: $logMessage = ''; goto f40be; B3d8c: foreach ($tagsPattern as $tag) { goto c3e78; ed802: A5ef1: goto Bdc8e; bd3b1: $tags[] = $tag; goto C499b; c3e78: if (isset(self::$tagsRegistry[$tag])) { goto A5ef1; } goto bd3b1; Bdc8e: Db08f: goto A036e; C499b: self::$tagsRegistry[$tag] = $tag; goto ed802; A036e: } goto f735c; bd772: $tags = []; goto dc197; aabf1: $isCacheWarmerEnabled = $this->varnishConfig->isCacheWarmerEnabled(); goto Bdef3; Dec93: } public function addToQueue(array $tags) { goto F0536; B120c: B67b1: goto Fc5d8; C9e26: try { goto B8345; E816f: foreach ($this->urlCollection as $url) { $urls[] = ["\163\164\x6f\x72\145\137\151\144" => $url->getStoreId(), "\x70\141\x74\150" => $url->getPath(), "\160\x72\x69\x6f\162\151\x74\171" => \Mgt\Varnish\Model\UrlQueue::PRIORITY_HIGH]; F3ef0: } goto A1520; F1848: $urlQueue->addToQueue($urls); goto e5776; A1520: a198c: goto Aa944; Aa944: if (!count($urls)) { goto B89a3; } goto Ef702; Ef702: $urlQueue = $this->objectManager->create("\115\x67\164\134\126\141\x72\x6e\151\x73\x68\134\x4d\157\144\145\154\x5c\x55\x72\154\121\x75\145\165\145"); goto F1848; B8345: $urls = []; goto c33b0; e5776: B89a3: goto Ecc9d; c33b0: $this->urlCollection->addTagsFilter($tags); goto E816f; Ecc9d: } catch (\Exception $e) { $errorMessage = sprintf("\101\156\x20\x65\x72\162\157\x72\x20\157\143\x63\x75\162\x72\x65\144\x20\x64\x75\x72\x69\156\147\x20\141\x64\144\x69\156\x67\x20\x74\157\x20\x71\x75\x65\165\145\54\x20\x65\x72\162\157\x72\40\155\x65\163\163\141\147\x65\72\x20\45\163", $e->getMessage()); $this->coreLogger->error($errorMessage); } goto B120c; F0536: if (!count($tags)) { goto B67b1; } goto C9e26; Fc5d8: } public function purgeStoreRequest(\Magento\Store\Model\Store $store) { goto d36e0; e34da: $logMessage = sprintf("\123\x74\x6f\162\x65\x20\x77\x69\164\150\x20\142\x61\x73\x65\x20\165\162\154\x3a\x20\45\163\x20\50\111\x44\x3a\x20\x25\x73\51\x20\150\x61\x73\x20\x62\145\x65\x6e\x20\x70\x75\162\x67\x65\x64", $store->getBaseUrl(), $store->getStoreId()); goto Bd569; De139: $this->_sendPurgeRequest($headers); goto e34da; d36e0: $uri = new Uri($store->getBaseUrl()); goto D5a60; D5a60: $headers = ["\110\117\123\124" => $uri->getHost()]; goto De139; Bd569: $this->logMessage($logMessage); goto Af6e0; Af6e0: } public function purgeUrlRequest($url) { goto D5c84; a37cb: $this->_sendPurgeRequest($headers, $uri->getPath()); goto e918a; Df279: $headers = ["\110\x4f\x53\124" => $uri->getHost()]; goto a37cb; F0c7f: $this->logMessage($logMessage); goto f68ea; e918a: $logMessage = sprintf("\125\162\154\72\x20\45\x73\x20\150\x61\163\40\x62\145\x65\156\40\160\165\x72\147\145\x64", $url); goto F0c7f; D5c84: $uri = new Uri($url); goto Df279; f68ea: } protected function _sendPurgeRequest(array $headers, $path = null) { goto b5d3d; b5d3d: $socketAdapter = $this->socketAdapterFactory->create(); goto b575c; Bf8b3: foreach ($servers as $server) { try { goto b35d0; c58c0: $socketAdapter->close(); goto a9809; D3c80: dca25: goto Fdff7; b538d: $socketAdapter->write("\120\x55\122\107\x45", $server, "\61\x2e\61", $headers); goto c58c0; Fdff7: $socketAdapter->connect($server->getHost(), $server->getPort()); goto b538d; b35d0: if (!(null !== $path)) { goto dca25; } goto c0866; c0866: $server->setPath($path); goto D3c80; a9809: } catch (\Exception $e) { goto a7c2e; a7c2e: $errorMessage = sprintf("\101\x6e\40\145\x72\162\x6f\162\40\157\143\x63\x75\x72\x72\x65\x64\40\x64\165\x72\151\x6e\147\x20\160\x75\x72\x67\151\x6e\x67\x2c\x20\x65\x72\x72\x6f\162\40\155\145\x73\163\141\x67\x65\x3a\x20\x22\45\163\x22", $e->getMessage()); goto acf46; acf46: $this->logMessage($errorMessage, true); goto c3e07; c3e07: throw new \Exception($errorMessage); goto C9cb0; C9cb0: } Afa29: } goto c99dd; c99dd: Ea25d: goto ebfe5; b575c: $socketAdapter->setOptions(["\164\151\x6d\145\157\x75\164" => self::REQUEST_TIMEOUT]); goto B04c0; B04c0: $servers = $this->getCacheServers(); goto Bf8b3; ebfe5: } protected function logMessage($message, $force = false) { goto c330f; f80f9: if (!(true === $isDebugModeEnabled || true === $force)) { goto d052f; } goto df27f; A09c3: d052f: goto Da7ab; c330f: $isDebugModeEnabled = $this->varnishConfig->isDebugModeEnabled(); goto f80f9; df27f: $this->logger->debug($message); goto A09c3; Da7ab: } protected function getCacheServers() { goto Df1b9; F4773: return $cacheServers; goto F506e; Df1b9: $cacheServers = []; goto c7b45; ec5d2: Ed1c7: goto F4773; c7b45: $serverList = $this->varnishConfig->getServerList(); goto e6e21; e6e21: foreach ($serverList as $server) { goto F6253; cf3a1: $uri->setQuery(null); goto bad07; E3641: $uri->setScheme("\x68\x74\164\x70"); goto cf3a1; F6253: list($host, $port) = explode("\72", $server); goto C729f; c2367: $uri->setHost($host); goto B9028; ead1c: a744c: goto B37e5; C729f: $uri = new Uri(); goto c2367; B9028: $uri->setPort($port); goto E50c0; E50c0: $uri->setPath("\57"); goto E3641; bad07: $cacheServers[] = $uri; goto ead1c; B37e5: } goto ec5d2; F506e: } }
