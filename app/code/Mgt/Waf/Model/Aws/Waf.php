<?php
 namespace Mgt\Waf\Model\Aws; use Aws\WAFV2\WAFV2Client as WafClient; use Aws\Credentials\Credentials; use Mgt\Waf\Model\Util\Retry; class Waf { const WEB_ACL_RULE_NAME_BLOCKED_COUNTRIES = "\102\x6c\157\143\153\x2d\x43\x6f\165\x6e\164\x72\x69\145\163"; const WEB_ACL_RULE_NAME_RATE_LIMIT_IPV4 = "\122\141\x74\145\x2d\x4c\x69\x6d\151\164\55\111\120\166\x34"; const WEB_ACL_RULE_NAME_RATE_LIMIT_IPV6 = "\122\141\164\x65\55\x4c\151\x6d\151\x74\55\x49\x50\x76\x36"; const WEB_ACL_RULE_BLOCK_MAGENTO_BACKEND_ACCESS = "\x42\x6c\157\143\153\x2d\x4d\x61\x67\145\156\x74\x6f\x2d\102\x61\x63\153\x65\156\x64\x2d\101\143\x63\x65\x73\x73"; const WEB_ACL_RULE_ALLOW_MAGENTO_BACKEND_ACCESS_IPV4 = "\101\154\x6c\157\x77\55\115\x61\x67\145\x6e\164\157\55\x42\x61\x63\x6b\x65\x6e\x64\x2d\101\x63\143\x65\163\163\x2d\111\120\166\x34"; const WEB_ACL_RULE_ALLOW_MAGENTO_BACKEND_ACCESS_IPV6 = "\101\x6c\154\x6f\x77\x2d\x4d\141\147\145\156\164\x6f\55\102\x61\143\x6b\x65\156\x64\55\x41\143\143\145\x73\x73\x2d\111\x50\x76\66"; const IP_SET_BLOCKED_IPS_IPV4 = "\x42\154\x6f\x63\153\145\144\x2d\x49\x50\x73\55\111\120\166\64"; const IP_SET_BLOCKED_IPS_IPV6 = "\x42\x6c\157\143\x6b\145\x64\55\x49\x50\x73\x2d\x49\x50\166\x36"; const IP_SET_RATE_LIMIT_WHITELISTED_IPV4 = "\x52\141\x74\x65\55\x4c\x69\x6d\151\164\55\x57\x68\151\x74\x65\154\x69\163\164\x65\144\55\x49\120\166\x34"; const IP_SET_RATE_LIMIT_WHITELISTED_IPV6 = "\x52\141\164\x65\x2d\x4c\x69\x6d\151\x74\x2d\x57\150\151\x74\x65\154\x69\163\x74\x65\144\55\111\120\x76\x36"; const IP_SET_MAGENTO_BACKEND_WHITELISTED_IPV4 = "\115\x61\x67\145\x6e\x74\x6f\x2d\102\x61\143\x6b\x65\x6e\x64\x2d\127\150\x69\x74\x65\x6c\x69\x73\x74\x65\144\55\x49\x50\166\x34"; const IP_SET_MAGENTO_BACKEND_WHITELISTED_IPV6 = "\x4d\141\x67\x65\156\x74\157\x2d\x42\x61\143\x6b\x65\x6e\144\55\127\x68\151\164\x65\x6c\x69\x73\x74\145\144\x2d\111\x50\166\66"; const REGEX_PATTERN_SET_BLOCKED_BOTS = "\x42\154\x6f\x63\153\145\x64\55\102\157\164\163"; const SCOPE_REGIONAL = "\122\105\x47\111\117\x4e\x41\x4c"; protected $awsAccessKey; protected $awsSecretAccessKey; protected $awsRegion; protected $projectName; protected $wafClient; protected $credentials; protected $webAcls = []; protected $webAclCache = []; protected $ipSets = []; protected $regexPatternSets = []; public function __construct($awsAccessKey, $awsSecretAccessKey, $awsRegion, $projectName) { goto C0f3f; C0f3f: $this->awsAccessKey = $awsAccessKey; goto E33fa; Ad397: $this->awsRegion = $awsRegion; goto ce000; E33fa: $this->awsSecretAccessKey = $awsSecretAccessKey; goto Ad397; ce000: $this->projectName = $projectName; goto Afa7c; Afa7c: } public function getWafClient() { goto fc46d; A4bbe: b55bc: goto D8836; Aa7d2: $credentials = new Credentials($this->awsAccessKey, $this->awsSecretAccessKey); goto f1316; fc46d: if (!(true === is_null($this->wafClient))) { goto b55bc; } goto Aa7d2; D8836: return $this->wafClient; goto ea816; f1316: $this->wafClient = new WafClient(["\166\x65\x72\x73\x69\157\156" => "\154\x61\x74\x65\163\x74", "\x72\145\x67\x69\157\156" => $this->awsRegion, "\143\162\145\144\145\x6e\164\x69\x61\x6c\x73" => $credentials]); goto A4bbe; ea816: } public function updateWebAcl(array $webAcl) { $wafClient = $this->getWafClient(); $this->retry(function () use($wafClient, $webAcl) { $webAcl["\x53\x63\157\160\145"] = self::SCOPE_REGIONAL; $wafClient->updateWebACL($webAcl); }); } public function updateIpSet($ipSetName, array $ips) { goto c4068; B5d61: goto E9cad; goto Ee879; c4068: $ips = array_unique($ips); goto F7dce; f473f: $ipSet = $this->getIpSet($ipSetName); goto d361b; Ad7e1: $ips = ["\62\60\60\x31\72\x30\144\x62\70\72\70\65\x61\x33\x3a\x30\60\x30\x30\72\60\x30\60\x30\72\70\x61\62\x65\x3a\60\x33\x37\60\72\x37\x33\x33\64\57\x31\x32\70"]; goto B5d61; D6b15: if ("\x76\x34" == substr($ipSetName, -2)) { goto B140d; } goto Ad7e1; F7dce: if (!(true === empty($ips))) { goto Fa3a0; } goto D6b15; Aff6a: E9cad: goto E879c; Ee879: B140d: goto Cfd9a; d361b: $wafClient = $this->getWafClient(); goto Ceaa9; E879c: Fa3a0: goto f473f; Cfd9a: $ips = ["\65\x32\x2e\x32\70\x2e\61\x34\x39\56\61\65\67\x2f\63\x32"]; goto Aff6a; Ceaa9: $this->retry(function () use($wafClient, $ipSet, $ips) { goto e831e; e312c: $wafClient->updateIPSet(["\111\144" => $ipSetId, "\x4e\141\155\x65" => $ipSetName, "\x4c\x6f\x63\x6b\124\157\153\145\156" => $ipSetLockToken, "\104\145\163\x63\x72\151\x70\x74\x69\x6f\x6e" => $ipSetDescription, "\101\x64\x64\x72\145\x73\163\x65\163" => $ips, "\x53\143\x6f\160\145" => self::SCOPE_REGIONAL]); goto A2f3f; adbb5: $ipSetDescription = $ipSet["\x44\x65\x73\143\x72\151\160\x74\151\157\156"] ?? ''; goto e312c; C89d7: $ipSetLockToken = $ipSet["\114\157\x63\x6b\x54\x6f\153\145\x6e"] ?? ''; goto adbb5; e831e: $ipSetId = $ipSet["\x49\x64"] ?? ''; goto Ebbdc; Ebbdc: $ipSetName = $ipSet["\x4e\141\155\145"] ?? ''; goto C89d7; A2f3f: }); goto A3e65; A3e65: } public function updateBlockedBotsRegexPatternSet(array $bots) { goto d6c5e; d6c5e: $regexPatternSet = $this->getRegexPatternSet(self::REGEX_PATTERN_SET_BLOCKED_BOTS); goto ee78f; F3194: $this->retry(function () use($wafClient, $regexPatternSet, $regexString) { goto F7eb8; b915d: $regexPatternSetLockToken = $regexPatternSet["\114\x6f\x63\x6b\x54\x6f\x6b\x65\156"]; goto e87e8; e87e8: $wafClient->updateRegexPatternSet(["\x49\x64" => $regexPatternSetId, "\x4e\x61\155\145" => $regexPatternSetName, "\104\145\163\x63\162\x69\160\x74\x69\157\156" => $regexPatternSetDescription, "\114\x6f\x63\x6b\x54\157\x6b\x65\x6e" => $regexPatternSetLockToken, "\x52\x65\147\165\x6c\141\162\105\x78\160\162\145\x73\163\x69\x6f\156\x4c\x69\163\164" => [["\x52\145\147\x65\170\123\x74\162\x69\x6e\147" => $regexString]], "\123\143\x6f\160\x65" => self::SCOPE_REGIONAL]); goto C3d8d; B7771: $regexPatternSetDescription = $regexPatternSet["\104\x65\x73\x63\x72\151\x70\x74\151\157\x6e"]; goto b915d; F7eb8: $regexPatternSetId = $regexPatternSet["\111\144"]; goto f8c51; f8c51: $regexPatternSetName = $regexPatternSet["\x4e\x61\x6d\x65"]; goto B7771; C3d8d: }); goto F1acf; ee78f: $wafClient = $this->getWafClient(); goto a16e9; a16e9: $regexString = sprintf("\x28\77\151\51\50\x25\163\51", implode("\x7c", $bots)); goto F3194; F1acf: } public function getIpAddressesForIpSet($ipSetName) { goto c450d; Ec2e8: return $ips; goto cd8b2; Cd630: $ips = true === isset($ipSet["\x41\x64\x64\162\x65\x73\x73\145\163"]) && false === empty($ipSet["\101\144\144\x72\145\x73\163\x65\x73"]) ? $ipSet["\x41\144\x64\x72\145\x73\x73\145\163"] : []; goto Ec2e8; c450d: $ipSet = $this->getIpSet($ipSetName); goto Cd630; cd8b2: } public function getBlockedBots() { goto Be447; e29b2: $regexPatternSet = $this->getRegexPatternSet(self::REGEX_PATTERN_SET_BLOCKED_BOTS); goto a0b25; Fbe76: $bots = explode("\x7c", substr($regexString, 5, -1)); goto C2016; Be447: $bots = []; goto e29b2; C2016: a298d: goto ef9d4; e5b6b: $regexString = $regexPatternSet["\122\x65\147\x75\154\x61\x72\105\x78\x70\162\x65\x73\163\151\157\156\x4c\151\x73\164"][0]["\x52\145\x67\x65\x78\x53\164\162\x69\x6e\147"]; goto Fbe76; ef9d4: return $bots; goto F7a7c; a0b25: if (!(true === isset($regexPatternSet["\122\145\147\x75\x6c\x61\162\105\170\x70\162\x65\163\163\x69\x6f\156\114\151\x73\x74"][0]["\122\145\147\x65\x78\123\x74\162\x69\x6e\147"]))) { goto a298d; } goto e5b6b; F7a7c: } public function getWebAcls() { goto F00a7; be2a6: Ef164: goto a2033; a6a96: $result = $this->retry(function () use($wafClient) { $result = $wafClient->listWebACLs(["\123\143\x6f\x70\x65" => self::SCOPE_REGIONAL]); return $result; }); goto db866; F5627: D3f3d: goto be2a6; db866: $webAcls = (array) $result->get("\x57\145\x62\101\103\x4c\163"); goto D3ffc; b835c: Edc41: goto F5627; a2033: return $this->webAcls; goto fcf41; fefd6: $wafClient = $this->getWafClient(); goto a6a96; Ef35c: foreach ($webAcls as $webAcl) { $this->webAcls[] = $webAcl; e4635: } goto b835c; D3ffc: if (!(false === empty($webAcls))) { goto D3f3d; } goto Ef35c; F00a7: if (!(true === empty($this->webAcls))) { goto Ef164; } goto fefd6; fcf41: } public function getWebAcl($webAclName) { goto Cd643; d7b16: a6f5b: goto cc2ce; A00e9: goto fd1a4; goto E54f9; a7f0f: foreach ($webAcls as $webAcl) { goto A7a57; Ca3d0: $wafClient = $this->getWafClient(); goto aa4e6; A7a57: if (!(true === isset($webAcl["\x4e\x61\155\x65"]) && $webAclName == $webAcl["\x4e\141\155\x65"])) { goto e8250; } goto Ca3d0; C6dd1: return $this->webAclCache[$webAclName]; goto ce578; d8474: $this->webAclCache[$webAclName] = $webAcl; goto C6dd1; a994d: $webAclLockToken = $webAcl["\114\157\143\x6b\124\x6f\x6b\145\156"] ?? ''; goto Fa222; Fa222: $webAcl = (array) $result->get("\127\x65\x62\x41\103\114"); goto ec5fe; ce578: e8250: goto A9e31; ec5fe: $webAcl["\x4c\157\143\153\124\x6f\153\145\156"] = $webAclLockToken; goto d8474; A9e31: Da700: goto de8f9; aa4e6: $result = $this->retry(function () use($wafClient, $webAcl) { goto a6f23; acac8: return $result; goto F5d42; e3dab: $result = $wafClient->getWebACL(["\111\x64" => $webAclId, "\x4e\x61\155\x65" => $webAclName, "\x53\143\157\x70\145" => self::SCOPE_REGIONAL]); goto acac8; E7e57: $webAclName = $webAcl["\x4e\x61\x6d\x65"] ?? ''; goto e3dab; a6f23: $webAclId = $webAcl["\111\x64"] ?? ''; goto E7e57; F5d42: }); goto a994d; de8f9: } goto d7b16; Eb75b: $webAcls = $this->getWebAcls(); goto df6fd; df6fd: if (!(false === empty($webAcls))) { goto B82fe; } goto a7f0f; E54f9: e650a: goto D3929; F80fb: fd1a4: goto F2ead; F2ead: throw new \Exception(sprintf("\x57\145\x62\x20\x41\x43\x4c\x20\x22\45\x73\x22\56\40\156\157\x74\x20\146\157\165\156\144", $webAclName)); goto e263d; cc2ce: B82fe: goto A00e9; Cd643: if (true === isset($this->webAclCache[$webAclName])) { goto e650a; } goto Eb75b; D3929: return $this->webAclCache[$webAclName]; goto F80fb; e263d: } protected function getIpSets() { goto C4e05; E2e9f: if (!(false === empty($ipSets))) { goto e4e40; } goto B2fd7; dbc43: $ipSets = (array) $result->get("\x49\120\123\x65\x74\163"); goto E2e9f; B2fd7: $this->ipSets = $ipSets; goto ad185; ad185: e4e40: goto E9f5f; E56ac: $result = $this->retry(function () use($wafClient) { $result = $wafClient->listIPSets(["\x53\x63\x6f\x70\145" => self::SCOPE_REGIONAL]); return $result; }); goto dbc43; E9f5f: return $this->ipSets; goto f8dec; C4e05: $wafClient = $this->getWafClient(); goto E56ac; f8dec: } protected function getIpSet($ipSetName) { goto f4ea6; de7b2: $ipSetName = $this->getIpSetName($ipSetName); goto E81ef; bc83e: throw new \Exception(sprintf("\111\x50\x20\123\145\164\40\x22\45\x73\x22\x20\x6e\157\x74\40\x66\157\165\156\144\56", $ipSetName)); goto fca60; E81ef: $ipSets = $this->getIpSets(); goto dbb75; E84d4: B2c0e: goto bc83e; dbb75: foreach ($ipSets as $wafIpSet) { goto E0846; b4051: $ipSet = $wafIpSet; goto bdadf; A4791: if (!(false === empty($wafIpSet))) { goto Debbb; } goto d0a8c; Dc981: e265e: goto f13ce; E0846: $wafIpSetId = $wafIpSet["\111\x64"] ?? ''; goto b88a2; f13ce: Fc53c: goto Abbf9; A801d: $wafIpSetLockToken = $wafIpSet["\x4c\157\143\153\124\x6f\x6b\145\x6e"] ?? ''; goto F5ba9; bdadf: return $ipSet; goto cd254; F5ba9: if (!(false === empty($wafIpSetName) && $wafIpSetName == $ipSetName)) { goto e265e; } goto B9970; f330a: $result = $this->retry(function () use($wafClient, $wafIpSetId, $wafIpSetName) { $result = $wafClient->getIPSet(["\111\144" => $wafIpSetId, "\116\x61\x6d\x65" => $wafIpSetName, "\x53\x63\x6f\160\x65" => self::SCOPE_REGIONAL]); return $result; }); goto Db538; d0a8c: $wafIpSet["\114\157\143\153\124\157\x6b\x65\x6e"] = $wafIpSetLockToken; goto b4051; b88a2: $wafIpSetName = $wafIpSet["\116\141\x6d\145"] ?? ''; goto A801d; cd254: Debbb: goto Fd2d9; B9970: $wafClient = $this->getWafClient(); goto f330a; Fd2d9: goto B2c0e; goto Dc981; Db538: $wafIpSet = (array) $result->get("\111\x50\123\x65\x74"); goto A4791; Abbf9: } goto E84d4; f4ea6: $ipSet = null; goto de7b2; fca60: } protected function getRegexPatternSet($name) { goto bf321; Aa856: if (!(false === empty($regexPatternSets))) { goto Ea53d; } goto Fce15; ae682: throw new \Exception(sprintf("\x52\x65\x67\x65\x78\x20\120\x61\x74\x74\x65\x72\156\x20\123\145\x74\40\x22\x25\x73\x22\x20\156\x6f\164\x20\146\157\165\x6e\x64", $name)); goto c4c28; dcf6b: bbd8c: goto f5e4d; Fce15: foreach ($regexPatternSets as $regexPatternSet) { goto e0efa; D9f39: Ba2a7: goto E385e; Bca4b: A76ea: goto D9f39; b5e44: if (!(true === isset($data["\x4c\157\x63\153\x54\157\x6b\145\156"]))) { goto a0480; } goto b0f14; b6e63: if (!(true === isset($data["\122\145\x67\x75\x6c\x61\x72\105\x78\160\x72\x65\163\163\151\157\x6e\x4c\x69\163\164"]))) { goto F5c75; } goto B8adc; Ebf7f: $data = $result->get("\122\145\147\145\x78\x50\141\x74\164\x65\162\156\123\145\164"); goto b6e63; E04b8: F5c75: goto b5e44; Ab1e8: a0480: goto cde00; C03f4: $result = $this->retry(function () use($wafClient, $regexPatternSet) { goto A1b78; Ee9e2: $regexPatternSetName = $regexPatternSet["\116\141\155\x65"] ?? ''; goto Dd81c; Dd81c: $result = $wafClient->getRegexPatternSet(["\111\144" => $regexPatternSetId, "\x4e\141\x6d\145" => $regexPatternSetName, "\x53\x63\x6f\x70\x65" => self::SCOPE_REGIONAL]); goto E3e09; E3e09: return $result; goto c262a; A1b78: $regexPatternSetId = $regexPatternSet["\x49\x64"] ?? ''; goto Ee9e2; c262a: }); goto Ebf7f; C4173: goto bbd8c; goto Bca4b; e0efa: $regexPatternSetName = $regexPatternSet["\x4e\x61\155\145"] ?? ''; goto Ab6df; cde00: return $regexPatternSet; goto C4173; Ce623: $wafClient = $this->getWafClient(); goto C03f4; b0f14: $regexPatternSet["\x4c\x6f\x63\153\x54\x6f\153\x65\x6e"] = $data["\x4c\157\x63\153\x54\x6f\153\145\x6e"]; goto Ab1e8; B8adc: $regexPatternSet["\122\145\147\x75\x6c\141\162\x45\170\160\162\145\163\163\x69\x6f\156\114\151\x73\164"] = $data["\122\145\x67\165\x6c\x61\162\x45\170\x70\x72\145\x73\163\x69\x6f\x6e\114\x69\x73\164"]; goto E04b8; Ab6df: if (!(false === empty($regexPatternSetName) && $regexPatternSetName == $name)) { goto A76ea; } goto Ce623; E385e: } goto dcf6b; c4d39: $regexPatternSets = $this->getRegexPatternSets(); goto Aa856; bf321: $name = $this->getRegexPatternSetName($name); goto c4d39; f5e4d: Ea53d: goto ae682; c4c28: } protected function getRegexPatternSets() { goto b0ddf; F0dc1: $regexPatternSets = (array) $result->get("\122\x65\147\145\x78\x50\141\164\x74\x65\162\156\123\x65\x74\163"); goto d41e8; b0ddf: $wafClient = $this->getWafClient(); goto B9225; C1c08: return $this->regexPatternSets; goto e0557; d41e8: if (!(false === empty($regexPatternSets))) { goto e8c99; } goto Ea23d; B9225: $result = $this->retry(function () use($wafClient) { $result = $wafClient->listRegexPatternSets(["\x53\x63\157\x70\145" => self::SCOPE_REGIONAL]); return $result; }); goto F0dc1; Ea23d: $this->regexPatternSets = $regexPatternSets; goto a7315; a7315: e8c99: goto C1c08; e0557: } protected function getRegexPatternSetName($regexPatternSetName) { goto A5651; cfaa7: $regexPatternSetName = sprintf("\45\163\x2d\x4d\107\x54\55\45\163", $projectName, $regexPatternSetName); goto Af6c2; A5651: $projectName = ucfirst($this->getProjectName()); goto cfaa7; Af6c2: return $regexPatternSetName; goto fdad3; fdad3: } public function getBlockedCountryCodes($webAclName) { goto b6d5e; E2dfd: if (!(true === isset($webAclRule["\x53\164\141\164\145\x6d\x65\156\x74"]["\107\x65\157\x4d\141\164\143\x68\x53\x74\x61\x74\x65\155\145\156\x74"]["\103\157\x75\156\x74\162\171\103\157\x64\145\163"]) && false === empty($webAclRule["\x53\x74\x61\164\x65\155\145\x6e\164"]["\x47\145\x6f\x4d\141\x74\x63\x68\x53\x74\141\164\145\x6d\145\156\164"]["\103\x6f\x75\156\x74\162\171\x43\157\144\145\x73"]))) { goto ef96e; } goto A8725; e51e1: return $blockedCountryCodes; goto ca5f4; fd42e: $webAclRule = $this->getWebAclRule($webAcl, self::WEB_ACL_RULE_NAME_BLOCKED_COUNTRIES); goto E2dfd; Fb843: ef96e: goto e51e1; C2f43: $webAcl = $this->getWebAcl($webAclName); goto fd42e; b6d5e: $blockedCountryCodes = []; goto C2f43; A8725: $blockedCountryCodes = $webAclRule["\123\164\x61\164\x65\x6d\145\156\164"]["\x47\x65\x6f\115\x61\x74\x63\150\123\164\x61\x74\x65\x6d\x65\156\x74"]["\103\x6f\x75\156\164\162\x79\103\x6f\x64\x65\163"]; goto Fb843; ca5f4: } public function getWebAclRule(array $webAcl, $webAclRuleName) { goto b17db; cf7b4: foreach ($webAclRules as $webAclRule) { goto bb39f; bb39f: if (!(true === isset($webAclRule["\x4e\141\x6d\145"]) && $webAclRule["\x4e\141\x6d\145"] == $webAclRuleName)) { goto de1a0; } goto b061a; b061a: $webAclRuleFound = true; goto a7a36; aca38: be2a2: goto f7192; a7a36: goto b7846; goto Bce91; Bce91: de1a0: goto aca38; f7192: } goto d3dca; A44bf: $webAclRule = null; goto d6941; E2dcc: goto F59af; goto B7112; fe210: return $webAclRule; goto E2dcc; a4bce: if (!(false === empty($webAclRules))) { goto cbe33; } goto cf7b4; d6941: $webAclRules = $webAcl["\x52\165\x6c\145\163"] ?? []; goto a4bce; ccbe3: cbe33: goto b4745; Bfc7a: throw new \Exception(sprintf("\x57\x65\x62\40\x41\103\x4c\40\122\165\x6c\x65\x20\x22\45\x73\42\40\156\x6f\x74\40\146\x6f\x75\x6e\144\x2e", $webAclRuleName)); goto F77fa; b17db: $webAclRuleName = $this->getWebAclRuleName($webAclRuleName); goto a9565; b4745: if (false === $webAclRuleFound) { goto cc102; } goto fe210; d3dca: b7846: goto ccbe3; F77fa: F59af: goto D7c33; B7112: cc102: goto Bfc7a; a9565: $webAclRuleFound = false; goto A44bf; D7c33: } public function getRateLimit($webAclName) { goto eee4c; d975b: goto De9b3; goto d3bc6; eee4c: $webAcl = $this->getWebAcl($webAclName); goto B1cce; ac1f7: goto fc6ab; goto Bdf1f; Bdf1f: e52da: goto b458c; Fe72a: return $rateLimit; goto c9ea9; b458c: $webbAclRuleName = $this->getWebAclRuleName(self::WEB_ACL_RULE_NAME_RATE_LIMIT_IPV4); goto B22a7; d2e35: if (false === is_null($webAclRule)) { goto B8d6c; } goto cd0ba; ff878: $rateLimit = $webAclRule["\x53\x74\141\164\x65\155\x65\156\x74"]["\122\x61\164\145\x42\x61\x73\145\144\x53\x74\x61\164\x65\x6d\x65\x6e\x74"]["\x4c\151\155\x69\x74"] ?? ''; goto Fe72a; c9ea9: De9b3: goto Ca8ed; Ca8ed: fc6ab: goto ac16b; d3bc6: B8d6c: goto ff878; cd0ba: throw new \Exception(sprintf("\127\x65\142\40\101\103\x4c\x20\122\165\154\x65\x20\42\x25\163\42\x20\x6e\x6f\164\40\146\x6f\165\156\x64\56", $webbAclRuleName)); goto d975b; B22a7: $webAclRule = $this->getWebAclRule($webAcl, self::WEB_ACL_RULE_NAME_RATE_LIMIT_IPV4); goto d2e35; B1cce: if (false === is_null($webAcl)) { goto e52da; } goto defd5; defd5: throw new \Exception(sprintf("\x55\156\x61\x62\x6c\x65\40\164\157\x20\147\145\164\40\x57\x65\142\x20\x41\x43\x4c\x20\42\45\163\x22\x2e", $webAclName)); goto ac1f7; ac16b: } public function getWebAclRuleName($webAclRuleName) { goto Ea07e; adc25: $webAclRuleName = sprintf("\45\163\x2d\x4d\107\x54\55\45\163", $projectName, $webAclRuleName); goto Ceffe; Ceffe: return $webAclRuleName; goto b2c77; Ea07e: $projectName = ucfirst($this->getProjectName()); goto adc25; b2c77: } public function getIpSetName($ipSetName) { goto Bc96f; bad3b: return $ipSetName; goto C281d; Fd58e: $ipSetName = sprintf("\45\163\55\x4d\107\x54\55\45\x73", $projectName, $ipSetName); goto bad3b; Bc96f: $projectName = ucfirst($this->getProjectName()); goto Fd58e; C281d: } protected function getProjectName() { return $this->projectName; } protected function retry(callable $fn, $retries = 2, $delay = 15) { return Retry::retry($fn, $retries, $delay); } }
